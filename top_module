module top_module (clk,rst,btn_load_a,btn_load_b,sum,sub,sw,led);

    input clk,rst,btn_load_a,btn_load_b,sum,sub;
    input [15:0] sw;
    output [15:0] led;

    reg [15:0] reg_a = 0;
    reg [15:0] reg_b = 0;

    wire [15:0] o_res;

    // Load inputs
    always @(posedge clk) begin
        if (rst) begin
            reg_a <= 16'd0;
        end else if (btn_load_a) begin
            reg_a <= sw;
        end
    end
    
    always @(posedge clk) begin
        if (rst) begin
            reg_b <= 16'd0;
        end else if (btn_load_b) begin
            reg_b <= sw;
        end
    end

    // operation button
    reg sum_prev = 0;
    wire sum_w;

    always @(posedge clk) begin
        sum_prev <= sum;
    end
    assign sum_w = sum & ~sum_prev; 

    reg sub_prev = 0;
    wire sub_w;

    always @(posedge clk) begin
        sub_prev <= sub;
    end
    assign sub_w = sub & ~sub_prev;


    // Instantiate adder modul
    main uut (.clk(clk),.rst(rst),.i_a(reg_a),.i_b(reg_b),.sub(sub_w),.sum(sum_w),.o_res(o_res));

    assign led = o_res;

endmodule
